// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Trainer {
  id String @id @default(uuid())
  userId String @db.VarChar(255) @unique
  fullName String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  password String  @db.VarChar(255) 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  author String? @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean? @default(false)
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  chapters Chapter[]
  reviews Reviews[]
  attachments Attachment[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Reviews {
  id String @id @default(uuid())
  userId String
  comment String @db.Text
  rating Int
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseId])
}

model UserProgress {
  id String @id @default(uuid())
  userId String
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  @@unique([userId, courseId])
  @@index([courseId])
}

